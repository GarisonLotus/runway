"""Kustomize module."""

import logging
import os
import subprocess
import sys

from . import RunwayModule, warn_on_skipped_configs
from ..util import which

LOGGER = logging.getLogger('runway')


def gen_overlay_dirs(environment, region):
    """Generate possible overlay directories."""
    return [
        # Give preference to explicit environment-region dirs
        "%s-%s" % (environment, region),
        # Fallback to environment name only
        environment
    ]


def get_overlay_dir(overlays_path, environment, region):
    """Determine overlay directory to use."""
    for name in gen_overlay_dirs(environment, region):
        overlay_dir = os.path.join(overlays_path, name)
        if os.path.isfile(os.path.join(overlay_dir, 'kustomization.yaml')):
            return overlay_dir
    return overlay_dir  # fallback to last dir


def generate_response(overlay_path, module_path, environment, region):
    """Determine if environment is defined."""
    configfile = os.path.join(overlay_path, 'kustomization.yaml')
    if os.path.isdir(overlay_path) and os.path.isfile(configfile):
        LOGGER.info("Processing kustomize overlay: %s", configfile)
        return {'skipped_configs': False}
    LOGGER.error("No kustomize overlay for this environment/region found -- "
                 "looking for one of \"%s\"",
                 ', '.join(
                     [os.path.join(module_path, 'overlays', i, 'kustomization.yaml')  # noqa
                      for i in gen_overlay_dirs(environment, region)]
                 ))
    return {'skipped_configs': True}


class Kustomize(RunwayModule):
    """Kustomize Runway Module."""

    def run_kustomize(self, command='plan'):
        """Run kustomize."""
        if not which('kustomize'):
            msg = ('"kustomize" not found in path or is not executable;'
                   ' please ensure it is installed correctly.')
            LOGGER.error(msg)
            sys.exit(1)
        kustomize_config_path = os.path.join(
            self.path,
            'overlays',
            get_overlay_dir(os.path.join(self.path,
                                         'overlays'),
                            self.context.env_name,
                            self.context.env_region)
        )
        response = generate_response(kustomize_config_path,
                                     self.path,
                                     self.context.env_name,
                                     self.context.env_region)
        if response['skipped_configs']:
            return response
        kustomize_cmd = ['kustomize', 'build', kustomize_config_path]
        kustomize_yml = subprocess.check_output(kustomize_cmd,
                                                env=self.context.env_vars)
        if command == 'plan':
            LOGGER.info('The following yaml was generated by '
                        'kustomize:\n\n%s', kustomize_yml)
        else:
            LOGGER.debug('The following yaml was generated by '
                         'kustomize:\n\n%s', kustomize_yml)
        if command == 'apply':
            if not which('kubectl'):
                LOGGER.error('"kubectl" not found in path or is not '
                             'executable; please ensure it is installed'
                             'correctly.')
                sys.exit(1)
            kubectl_cmd = ['kubectl', 'apply', '-f', '-']
            LOGGER.info("Running kubectl apply, passing in "
                        "kustomize generated yaml")
            kubctl_process = subprocess.Popen(kubectl_cmd,
                                              stdin=subprocess.PIPE,
                                              env=self.context.env_vars)
            kubctl_process.communicate(kustomize_yml)
            kubctl_return = kubctl_process.wait()
            if kubctl_return != 0:
                sys.exit(kubctl_return)
        return response

    def plan(self):
        """Run kustomize build, not applying to k8s."""
        result = self.run_kustomize(command='plan')
        warn_on_skipped_configs(result, self.context.env_name,
                                self.context.env_vars)

    def deploy(self):
        """Run kustomize build, pipe to kubectl apply."""
        result = self.run_kustomize(command='apply')
        warn_on_skipped_configs(result, self.context.env_name,
                                self.context.env_vars)

    def destroy(self):
        """Skip k8s destroy."""
        LOGGER.info('Destroy not currently supported for Kustomize; '
                    'Please use kubectl to delete your resources.')

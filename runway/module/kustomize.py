"""Kustomize module."""

import logging
import os
import subprocess
import sys

from . import RunwayModule, warn_on_skipped_configs
from ..util import which

LOGGER = logging.getLogger('runway')


def generate_response(path):
    """Determine if environment is defined."""
    configfile = os.path.join(path, 'kustomization.yaml')
    if os.path.isdir(path) and os.path.isfile(configfile):
        LOGGER.info("Processing kustomize overlay: %s", configfile)
        return {'skipped_configs': False}
    LOGGER.error("No kustomize overlay found for this environment "
                 "region combination (expected "
                 "overlay at %s)", configfile)
    return {'skipped_configs': True}

def get_kube_config(path, env, region):
    """Determine the kubeconfig to use.
    Returns the config file path
    """
    # checking first at base of repo, which should be one layer prior
    # from this module
    kube_config_basepath = os.path.join(path, '../.kube')
    kube_config = os.path.join(kube_config_basepath, env + "-" + region)
    if os.path.isdir(kube_config_basepath) and os.path.isfile(kube_config):
        LOGGER.info("Using config: "  + str(kube_config))
        return kube_config
    # checking within the module itself, for single module deployments
    kube_config_basepath = os.path.join(path, './.kube')
    kube_config = os.path.join(kube_config_basepath, env + "-" + region)
    if os.path.isdir(kube_config_basepath) and os.path.isfile(kube_config):
        LOGGER.info("Using config: "  + str(kube_config))
        return kube_config
    # now checking KUBECONFIG in os.environ
    if "KUBECONFIG" in os.environ:
        kube_config = os.environ['KUBECONFIG']
        kube_config = kube_config[1:]
        if os.path.isfile(kube_config):
            LOGGER.info("Using config: "  + str(kube_config))
            return kube_config
        else:
            LOGGER.error("KUBECONFIG variable set, but file not "
                         "found at: " + kube_config)
            LOGGER.error("Please update KUBECONFIG variable to valid "
                         "config or store config in base of repo. "
                         "Exiting Runway Run...")
            sys.exit(1)
    else:
        LOGGER.error("KUBECONFIG variable NOT set, nor kubeconfig "
                     "found in base of runway")
        LOGGER.error("Please update KUBECONFIG variable to valid "
                     "config or store config in base of repo. "
                     "Exiting Runway Run...")
        sys.exit(1)

class Kustomize(RunwayModule):
    """Kustomize Runway Module."""

    def run_kustomize(self, command='plan'):
        """Run kustomize."""
        if not which('kustomize'):
            msg = ('"kustomize" not found in path or is not executable;'
                   ' please ensure it is installed correctly.')
            LOGGER.error(msg)
            sys.exit(1)
        kustomize_config_path = os.path.join(self.path,
                                             'overlays',
                                             self.context.env_name,
                                             self.context.env_region)
        response = generate_response(kustomize_config_path)
        if response['skipped_configs']:
            return response
        kustomize_cmd = ['kustomize', 'build', kustomize_config_path]
        kustomize_yml = subprocess.check_output(kustomize_cmd,
                                                env=self.context.env_vars)
        if command == 'plan':
            LOGGER.info('The following yaml was generated by '
                        'kustomize:\n\n%s', kustomize_yml)
        else:
            LOGGER.debug('The following yaml was generated by '
                         'kustomize:\n\n%s', kustomize_yml)
        if command == 'apply':
            if not which('kubectl'):
                LOGGER.error('"kubectl" not found in path or is not '
                             'executable; please ensure it is installed'
                             'correctly.')
                sys.exit(1)
            kubeconfig = get_kube_config(self.path,
                                         self.context.env_name,
                                         self.context.env_region)
            kubectl_cmd = ['kubectl', '--kubeconfig', kubeconfig,
                           'apply', '-f', '-']
            LOGGER.info("Running kubectl apply, passing in "
                        "kustomize generated yaml")
            kubctl_process = subprocess.Popen(kubectl_cmd,
                                              stdin=subprocess.PIPE,
                                              env=self.context.env_vars)
            kubctl_process.communicate(kustomize_yml)
            kubctl_return = kubctl_process.wait()
            if kubctl_return != 0:
                sys.exit(kubctl_return)
        return response

    def plan(self):
        """Run kustomize build, not applying to k8s."""
        result = self.run_kustomize(command='plan')
        warn_on_skipped_configs(result, self.context.env_name,
                                self.context.env_vars)

    def deploy(self):
        """Run kustomize build, pipe to kubectl apply."""
        result = self.run_kustomize(command='apply')
        warn_on_skipped_configs(result, self.context.env_name,
                                self.context.env_vars)

    def destroy(self):
        """Skip k8s destroy."""
        LOGGER.info('Destroy not currently supported for Kustomize; '
                    'Please use kubectl to delete your resources.')
